<?xml version="1.0"?>

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

<binding id="conkframe">
      <content>
          <xul:deck flex="1">
            <xul:vbox flex="1">
	      <xul:browser flex="1" type="content-primary" pile="0"/>
	      <xul:hbox class="mode-line">
	      <xul:label class="mode-line-label" value="" crop="right" flex="1"/>
              </xul:hbox>
	    </xul:vbox>
	  </xul:deck>
      </content>
      <implementation type="application/x-javascript" implements="nsIDOMXULSelectControlElement">
            <field name="mCurrentWindow">
	          null
	    </field>
            <field name="mCurrentBrowser">
	          null
	    </field>
	    <field name="mBrowserContainer">
	      document.getAnonymousNodes(this)[0]
            </field>
	    <field name="mProgressListener">
	      null
            </field>
	    <field name="mProgressFilter">
	      null
            </field>

      <property name="mBrowsers"
                onget="return this.mBrowserContainer.getElementsByTagNameNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'browser');"
                readonly="true"/>

      <method name="setBrowserProgressListener">
        <parameter name="aBrowser"/>
        <body>
          <![CDATA[
	  try {
            aBrowser.webProgress.addProgressListener(this.mProgressFilter, Components.interfaces.nsIWebProgress.NOTIFY_ALL);
} catch(e) {window.alert(e);}
          ]]>
        </body>
      </method>

      <method name="getBrowserAtIndex">
        <parameter name="aIndex"/>
        <body>
          <![CDATA[
            return this.mBrowsers[aIndex];
          ]]>
        </body>
      </method>

      <method name="getBrowserIndex">
        <parameter name="aBrowser"/>
        <body>
          <![CDATA[
           var bs = this.mBrowsers;
           for (var i=0; i<bs.length; i++)
              if (bs[i] == aBrowser)
                return i;
           return null;
          ]]>
        </body>
      </method>
      <method name="focusBrowser">
        <parameter name="aBrowser"/>
	<body>
	<![CDATA[
	  try {
            function setFocus(element) {
              document.commandDispatcher.suppressFocusScroll = true;
              //Components.lookupMethod(element, "focus").call(element);
              element.focus();
              document.commandDispatcher.suppressFocusScroll = false;
            }

    	    this.mCurrentBrowser.focusedWindow = document.commandDispatcher.focusedWindow;
	    this.mCurrentBrowser.focusedElement = document.commandDispatcher.focusedElement;
	    this.mCurrentBrowser.setAttribute("type", "content");

	    // Update the pile
	    this.bringToTop(aBrowser, this.mCurrentBrowser);
	    this.mCurrentBrowser = aBrowser;
            aBrowser.setAttribute("type", "content-primary");

            if (aBrowser.focusedElement) {
              try {
                setFocus(aBrowser.focusedElement);
              } catch (e) {
                setFocus(aBrowser.focusedWindow);
              }
            }
            else if (aBrowser.focusedWindow)
              setFocus(aBrowser.focusedWindow);
            else // new tab, focus our new content area
              setTimeout(setFocus, 0, window.content);
          conkeror.run_hooks(conkeror.select_buffer_hook, window, [this.mCurrentBrowser]);
	  } catch(e) {alert(e);}
	]]>
	</body>
      </method>
      <method name="pushPileDown">
      <parameter name="a"/>
      <parameter name="b"/>
      <body>
        <![CDATA[
	  for(i=0; i<this.mBrowsers.length; i++) {
	    var p = this.mBrowsers[i].getAttribute('pile');
	    if (p > a && p <= b)
	      this.mBrowsers[i].setAttribute('pile', p-1);
	    }    
	]]>
	</body>
      </method>
      <method name="bringToTop">
      <parameter name="b"/>
      <parameter name="oldb"/>
      <body>
        <![CDATA[
	  bp = b.getAttribute('pile');
	  oldbp = oldb.getAttribute('pile');
	  // is b already higher in the pile than oldb?
	  if (bp > oldbp)
	    return;
	  this.pushPileDown(bp, oldbp);
	  b.setAttribute('pile', oldbp);
	]]>
      </body>
      </method>
      <method name="getPileTop">
        <body>
	  <![CDATA[
	  var max = this.mBrowsers[0].getAttribute('pile');
	  for(i=1; i<this.mBrowsers.length; i++) {
	    var p = this.mBrowsers[i].getAttribute('pile');
	    max = p>max ? p:max;
	  }
	  return max;
      ]]>
      </body>
      </method>
      <method name="getBrowserForPileID">
        <parameter name="id"/>
        <body>
	  <![CDATA[
	  for(i=0; i<this.mBrowsers.length; i++) {
	    if (id == this.mBrowsers[i].getAttribute("pile"))
	      return this.mBrowsers[i];
	  }
	  return null;
      ]]>
      </body>
      </method>
      <property name="modeLine"
                onget="return this.mCurrentBrowser.nextSibling.firstChild"
		readonly="true"/>
      <property name="docShell"
                onget="return this.mCurrentBrowser.docShell"
                readonly="true"/>

      <property name="webNavigation"
                onget="return this.mCurrentBrowser.webNavigation"
                readonly="true"/>

      <property name="webProgress"
                readonly="true"
                onget="return this.mCurrentBrowser.webProgress"/>

      <property name="markupDocumentViewer"
                onget="return this.mCurrentBrowser.markupDocumentViewer;"
                readonly="true"/>

      <property name="contentDocument"
                onget="return this.mCurrentBrowser.contentDocument;"
                readonly="true"/>
      <property name="curbrow"
                onget="return this.mBrowserContainer;"
                readonly="true"/>

      <property name="browsers"
                onget="return this.mBrowserContainer.getElementsByTagNameNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'browser');"
                readonly="true"/>

      <constructor>
        <![CDATA[
	  this.mCurrentBrowser = this.getBrowserAtIndex(0);
	  this.mProgressFilter = Components.classes["@mozilla.org/appshell/component/browser-status-filter;1"]
                                           .createInstance(Components.interfaces.nsIWebProgress);
          this.setBrowserProgressListener(this.mCurrentBrowser);
        ]]>
      </constructor>
      </implementation>
</binding>
</bindings>

<?xml version="1.0"?>

<bindings id="emacsWindowBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

<binding id="conkframe">
      <content>
            <xul:vbox flex="1">
                      <xul:browser flex="1" type="content-primary"/>
	    </xul:vbox>
      </content>
      <implementation type="application/x-javascript" implements="nsIDOMXULSelectControlElement, nsIAccessibleProvider">
            <property name="accessible">
              <getter>
              <![CDATA[
                var accService = Components.classes["@mozilla.org/accessibilityService;1"].getService(Components.interfaces.nsIAccessibilityService);
                return accService.createXULGroupboxAccessible(this);
              ]]>
            </getter>
            </property>
            <field name="mCurrentBrowser">
	          null
	    </field>
	    <field name="mBrowserContainer">
	      document.getAnonymousNodes(this)[0]
            </field>
	    <field name="mProgressListener">
	      null
            </field>
	    <field name="mProgressFilter">
	      null
            </field>

      <property name="mBrowsers"
                onget="return this.mBrowserContainer.childNodes"
                readonly="true"/>

      <method name="setBrowserProgressListener">
        <parameter name="aBrowser"/>
        <body>
          <![CDATA[
	  try {
            aBrowser.webProgress.addProgressListener(this.mProgressFilter, Components.interfaces.nsIWebProgress.NOTIFY_ALL);
} catch(e) {window.alert(e);}
          ]]>
        </body>
      </method>

      <method name="getBrowserAtIndex">
        <parameter name="aIndex"/>
        <body>
          <![CDATA[
            return this.mBrowsers[aIndex];
          ]]>
        </body>
      </method>

      <method name="newBrowser">
        <parameter name="aUrl"/>
        <body>
	  <![CDATA[
	  try {
	    if (!aUrl)
	      aUrl = "chrome://conkeror/content/help.html";
            var b = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul",
                                             "browser"); 

            b.setAttribute("type", "content");
            b.setAttribute("flex", "1");
	    this.mBrowserContainer.appendChild(b);
	    this.setBrowserProgressListener(b);
            b.loadURIWithFlags(aUrl,
	                       nsIWebNavigation.LOAD_FLAGS_NONE, null, null, null);
            this.setCurrentBrowser(b);
} catch(e) {window.alert(e);}
          ]]>
	</body>
      </method>
      <method name="nextBrowser">
        <body>
	  <![CDATA[
	  try {
	    if (this.mCurrentBrowser == null || this.mBrowsers.length <= 1)
	      return;
	    if (this.mCurrentBrowser == this.mBrowserContainer.lastChild)
	      this.setCurrentBrowser(this.mBrowserContainer.firstChild);
	    else
	      this.setCurrentBrowser(this.mCurrentBrowser.nextSibling);
} catch(e) {window.alert(e);}
          ]]>
</body>
      </method>
      <method name="prevBrowser">
      <body>
	  <![CDATA[
	  try {
	    if (this.mCurrentBrowser == null || this.mBrowsers.length <= 1)
	      return;

	    if (this.mCurrentBrowser == this.mBrowserContainer.firstChild)
	      this.setCurrentBrowser(this.mBrowserContainer.lastChild);
	    else
	      this.setCurrentBrowser(this.mCurrentBrowser.previousSibling);
	  } catch(e) {alert(e); }
          ]]>
</body>
      </method>
      <method name="setCurrentBrowser">
        <parameter name="aBrowser"/>
        <body>
	  <![CDATA[
	  try{
	    var newBrowser = aBrowser;

	    if (this.mCurrentBrowser == newBrowser) {
	      return;
	    }


            if (this.mCurrentBrowser) {
              this.mCurrentBrowser.focusedElement = document.commandDispatcher.focusedWindow;
              this.mCurrentBrowser.focusedElement = document.commandDispatcher.focusedElement;
              this.mCurrentBrowser.setAttribute("type", "content");
	      this.mCurrentBrowser.setAttribute("collapsed", "true");
            }

            newBrowser.setAttribute("type", "content-primary");
	    newBrowser.setAttribute("collapsed", "false");
	    this.mCurrentBrowser = newBrowser;

            function setFocus(element) {
              Components.lookupMethod(element, "focus").call(element);
            }

	    this.updateModeLine();

            document.commandDispatcher.suppressFocusScroll = true;
            if (newBrowser.focusedElement) {
              try {
                setFocus(newBrowser.focusedElement);
              } catch (e) {
                setFocus(newBrowser.focusedWindow);
              }
            }
            else if (newBrowser.focusedWindow)
              setFocus(newBrowser.focusedWindow);
            else // new tab, focus our new content area
              setTimeout(setFocus, 0, window.content);

	      } catch (e) { window.alert(e); }
            document.commandDispatcher.suppressFocusScroll = false;
          ]]>	    	
        </body>
      </method>
      <method name="updateModeLine">
        <body>
	<![CDATA[
	try {
	    // Update the modeline
	    if (this.mProgressListener) {
              var loc = this.mCurrentBrowser.currentURI;
	      if (!loc)
                loc = ({ spec: "" });
	      this.mProgressListener.onLocationChange(this.mCurrentBrowser.webProgress,
	                                              null, loc);
            }
} catch(e){alert(e);}
	]]>
	</body>
      </method>
      <method name="killBrowser">
        <parameter name="aBrowser"/>
	<body>
	  <![CDATA[
	   try {
	    if (this.mBrowsers.length <= 1)
	      return;

            // make sure we can kill the browser
            var ds = aBrowser.docShell;
            if (ds.contentViewer && !ds.contentViewer.permitUnload())
              return;

	    aBrowser.setAttribute("type", "content");

	    // pick the next browser to be the new current browser
	    var newBrowser;
	    if (aBrowser == this.mBrowserContainer.lastChild)
	      newBrowser = this.mBrowserContainer.lastChild.previousSibling;
	    else
              newBrowser = aBrowser.nextSibling;

	    this.mBrowserContainer.removeChild(aBrowser);
	    //aBrowser.destroy();
	    this.setCurrentBrowser(newBrowser);
	    } catch(e) {window.alert(e);}
          ]]>
	</body>
      </method>
      <method name="killCurrentBrowser">
        <body>
	<![CDATA[
	  this.killBrowser(this.mCurrentBrowser);
	]]>
	</body>
      </method>
      <method name="setProgressListener">
        <parameter name="aListener"/>
	<parameter name="aMask"/>
	<body>
          <![CDATA[
	  try {
	    if (this.mProgressListener)
	      this.mProgressFilter.removeProgressListener(this.mProgressListener);
	    this.mProgressListener = aListener;
	    if (this.mProgressListener) {
	      this.mProgressFilter.addProgressListener(this.mProgressListener, aMask);
	    }
} catch(e) {window.alert(e);}
	  ]]>
	</body>
      </method>
      <method name="getBrowserNames">
        <body>
	<![CDATA[
	try {
	  var bs = this.mBrowsers;
	  var names = [];
	  for (var i=0; i<bs.length; i++) {
	    names.push(bs[i].webNavigation.currentURI.spec);
	  }
	  return names;
        } catch(e) {alert(e);}
	]]>
	</body>
      </method>

      <property name="docShell"
                onget="return this.mCurrentBrowser.docShell"
                readonly="true"/>

      <property name="webNavigation"
                onget="return this.mCurrentBrowser.webNavigation"
                readonly="true"/>

      <property name="webProgress"
                readonly="true"
                onget="return this.mCurrentBrowser.webProgress"/>

      <property name="contentDocument"
                onget="return this.mCurrentBrowser.contentDocument;"
                readonly="true"/>
      <property name="curbrow"
                onget="return this.mBrowserContainer;"
                readonly="true"/>

      <property name="browsers"
                onget="return document.getElementsByTagName('browser');"
                readonly="true"/>

      <constructor>
        <![CDATA[
	  this.mProgressFilter = Components.classes["@mozilla.org/appshell/component/browser-status-filter;1"]
                                           .createInstance(Components.interfaces.nsIWebProgress);
            this.mCurrentBrowser = this.getBrowserAtIndex(0);
	    this.setBrowserProgressListener(this.mCurrentBrowser);
        ]]>
      </constructor>
      </implementation>
</binding>

</bindings>